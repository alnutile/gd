<?php


namespace GD\Tests;

use GD\Exceptions\TestDoesNotFileExists;

class AppendFileTest extends TestCase
{

    public function setUp()
    {
        parent::setUp();
        $this->setupFolderAndAppendFile();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->cleanUpFile();
    }

    public function testShouldSetContentOfFileToAppend()
    {

        //Arrange
        //setup the files
        //  the one with the new methods
        //  the destination to add it to
        $path = $this->gd->getDestinationFolderRoot() . '/tests/Unit/TestAppendTest.php';
        \PHPUnit_Framework_Assert::assertFileNotExists($path);

        $path = 'tests/features/test_append.feature';

        //Act
        //run as normal eg pickle append path/to/feature
        $this->gd->setPathToFeature($path)
            ->appendFeatures();

        //Assert
        //not duplicates
        //new ones added
        $this->assertNotNull($this->gd->getAppendUnitTest()->getExistingTestContent());

        $this->assertContains("thenICanNotGoIntoEditMode", $this->gd->getAppendUnitTest()->getUpdatedContent());
        $this->assertContains("andTheLastNameOfFoo", $this->gd->getAppendUnitTest()->getUpdatedContent());
        $this->assertContains("thenICanSeeTheFirstNameOfFoo", $this->gd->getAppendUnitTest()->getUpdatedContent());
        $this->assertContains("andIGoToLookAtTheProfileOfUserBar", $this->gd->getAppendUnitTest()->getUpdatedContent());
        $this->assertContains("givenIAmLoggedInAsUserFoo", $this->gd->getAppendUnitTest()->getUpdatedContent());
        $this->assertContains("testGuestViewsProfile", $this->gd->getAppendUnitTest()->getUpdatedContent());
    }

    public function testShouldNotAddDuplicateMethods()
    {

        $path = $this->gd->getDestinationFolderRoot() . '/tests/Unit/TestAppendTest.php';
        \PHPUnit_Framework_Assert::assertFileNotExists($path);

        $path = 'tests/features/test_append.feature';


        //Act
        //run as normal eg pickle append path/to/feature

        $this->gd->setPathToFeature($path)
            ->appendFeatures();
        
        //Assert
        //not duplicates
        //new ones added

        $string = $this->gd->getAppendUnitTest()->getDuskClassAndMethodsString();
        $found = substr_count($string, 'protected function givenIHaveAProfileCreated');

        \PHPUnit_Framework_Assert::assertEquals(1, $found);
    }

    public function testCompareResultsToFixture()
    {

        $results_path = $this->gd->getDestinationFolderRoot() . '/TestAppendTest.php';

        $path = 'tests/features/test_append.feature';


        $this->gd->setPathToFeature($path)
            ->appendFeatures();

        $results_content = $this->file->get($results_path);

        $this->assertContains("protected function thenICanNotGoIntoEditMode", $results_content);
        $this->assertContains("protected function andTheLastNameOfFoo", $results_content);
        $this->assertContains("protected function thenICanSeeTheFirstNameOfFoo", $results_content);
        $this->assertContains("protected function andIGoToLookAtTheProfileOfUserBar", $results_content);
        $this->assertContains("protected function givenIAmLoggedInAsUserFoo", $results_content);
        $this->assertContains("public function testGuestViewsProfile", $results_content);

        $string = '
        $this->givenIAmLoggedInAsUserFoo();
        $this->andIGoToLookAtTheProfileOfUserBar();
        $this->thenICanSeeTheFirstNameOfFoo();
        $this->andTheLastNameOfFoo();
        $this->thenICanNotGoIntoEditMode();';
        $this->assertContains($string, $results_content);
    }

    /**
     * @expectedException \GD\Exceptions\TestDoesNotFileExists
     */
    public function testExceptionFileNotThere()
    {

        $path = 'tests/features/test_append_not_there.feature';


        //Act
        //run as normal eg pickle append path/to/feature

        $this->gd->setPathToFeature($path)
            ->appendFeatures();
    }
}
