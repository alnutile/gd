#!/usr/bin/env php
<?php

use Symfony\Component\Console\Output\OutputInterface;

require __DIR__.'/bootstrap/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

$app->command('initialize [--context=] relative_feature_file_path', function (
    OutputInterface $output,
    GD\GherkinToDusk $gd, $context, $relative_feature_file_path) {

    //get source path of file
    $output->write("\nCreating File for you\n");

    try {
        $gd->setContext($context)
            ->setPathToFeature($relative_feature_file_path)
            ->initializeFeature();

        $path = $gd->fullPathToDestinationFile();
        $output->write(sprintf("File now in %s for you to work on", $path));

        $output->write("\n****done*****\n");
    } catch (\Exception $e) {
        $output->write(sprintf("Error initializing \nMESSAGE: %s\n", $e->getMessage()));
    }

})->defaults([
    'context' => "domain"
])->descriptions("This will stuff out your feature into a Dusk Test file",
    [
        '--context' => "domain or ui this will help us to know what Dusk test to run domain is the inside code ui is the outside",
        "relative_feature_file_path" => "The path to the file for example tests/features/foo.feature"
    ]
);



$app->command('update [--context=] relative_feature_file_path', function (
    OutputInterface $output,
    \Illuminate\Filesystem\Filesystem $files, $context) {

    //get path of file
    //find the matching class
    //make sure the order is there
    //and all the methods are there
    //for example:
    //Scenario: Foo Bar
    //  Given I am doing x
    //  And I do y
    //  Then I should have z
    //Then there should be a method
    // public function testFooBar() {
    //And if there are Steps then that would have those steps
    //   $this->givenIAmDoingX()
    //   $this->andIDoY()
    //   $this->thenIShouldHaveZ
    $output->write("\n****done*****\n");

})->defaults([
    'context' => "domain"
])->descriptions("This will stuff out your feature into a Dusk Test file",
    [
        '--context' => "domain or ui this will help us to know what Dusk test to run domain is the inside code ui is the outside",
        "relative_feature_file_path" => "The path to the file for example tests/features/foo.feature"
    ]
);

$app->command('run [--context=] relative_feature_file_path', function (
    OutputInterface $output,
    \Illuminate\Filesystem\Filesystem $files, $context, $relative_feature_file_path) use ($app) {


    if($context == 'domain') {
        //run the phpunit tests
        //one per file
        //and if fail then fail out

        $run = new \GD\RunTest($app);

        $run->handleDomain($relative_feature_file_path);


        $path_to_test = 'foo';
        $command = sprintf("vendor/bin/phpunit %s", $path_to_test);
        $process = new Symfony\Component\Process\Process($command);

        //@TODO directory level too

    }

    $output->write("\n****done*****\n");

})->defaults([
    'context' => "domain"
])->descriptions("This will stuff out your feature into a Dusk Test file",
    [
        '--context' => "domain or ui this will help us to know what Dusk test to run domain is the inside code ui is the outside",
        "relative_feature_file_path" => "The path to the file for example tests/features/foo.feature"
    ]
);


$app->run();